{"version":3,"sources":["components/Highscores.js","components/LoadingAssets.js","components/MainScreen.js","components/Card.js","components/PopMessage.js","components/GamePage.js","components/App.js","index.js"],"names":["Highscores","state","highscores","highScoresList","map","score","i","className","name","points","level","list","JSON","parse","localStorage","getItem","this","setState","React","Component","LoadingAssets","imagesLoaded","imagesList","arr","index","push","id","url","console","log","loadImage","image","Promise","resolve","reject","loadImg","Image","src","onload","onerror","err","loadImages","all","then","catch","MainScreen","changeName","e","props","setplayerName","target","value","playerName","type","placeholder","onChange","onClick","playGame","Card","wasClicked","active","block","demo","clicked","makeClass","myclass","alt","PopMessage","time","interval","setInterval","clearInterval","GamePage","errors","listOfCards","perfect","demoMode","demoTime","activeKey","activeType","matched","gameEnd","nextLevel","calculatePoints","calculateTime","makeListOfCards","Math","max","ceil","parseInt","maxCards","items","Array","keys","shuffleArray","array","length","j","floor","random","stopGame","insertHighscore","startLevel","setTimeout","scoresList","sort","a","b","slice","setItem","stringify","key","newActiveType","newActiveKey","includes","newMatch","newPoints","cards","card","popMessage","Fragment","App","playing","setPlayerName","toggleGame","showMyComponent","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.885932f8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/highscores.scss\";\n\nclass Highscores extends React.Component {\n  state = { highscores: [] };\n\n  componentDidMount() {\n    let list = JSON.parse(localStorage.getItem(\"scoresList\")) || [];\n    this.setState({\n      highscores: list,\n    });\n  }\n\n  highScoresList = () => {\n    return this.state.highscores.map((score,i) => {\n      return (\n        <li className=\"player\" key={i}>\n          <div className=\"name\">{score.name}</div>\n          <div className=\"points\">{score.points}<span>points</span></div>\n          <div className=\"level\">{score.level ? score.level : 0}<span>level</span></div>\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return <ul className=\"highscores\">{this.highScoresList()}</ul>;\n  }\n}\n\nexport default Highscores;\n","import React from \"react\";\nimport \"../styles/loading.scss\";\n\nclass LoadingAssets extends React.Component {\n  state = {\n    imagesLoaded: false,\n  };\n\n  imagesList = ()=>{\n    let arr = [];\n    for (let index = 0; index < 28; index++) {\n      arr.push({id:index,url:\"images/\"+index+\".jpg\"});\n    }\n    console.log(arr);\n    return arr;\n  };\n\n  loadImage = (image) => {\n    return new Promise((resolve, reject) => {\n      const loadImg = new Image();\n      loadImg.src = image.url;\n      // wait 2 seconds to simulate loading time\n      loadImg.onload = () => {\n        resolve(image.url);\n      };\n      loadImg.onerror = (err) => reject(err);\n    });\n  };\n\n\n  loadImages = () => {\n    Promise.all(this.imagesList().map((image) => this.loadImage(image)))\n      .then(() => this.setState({ imagesLoaded: true }))\n      .catch((err) => {\n        this.setState({ imagesLoaded: true });\n        console.log(this.state.imagesLoaded,\"Failed to load images\", err);\n      });\n  };\n\n  componentDidMount(){\n    this.loadImages();\n  }\n\n  render() {\n    return (\n      \n        <div className=\"images\">\n          {this.state.imagesLoaded ? (<h5>Images Load, you can start the game</h5>) : (<h5>Pre-loading images....</h5>)}\n        </div>\n\n    );\n  }\n}\n\nexport default LoadingAssets;\n","import React from \"react\";\nimport Highscores from \"./Highscores\";\nimport LoadingAssets from \"./LoadingAssets\";\nimport \"../styles/main.scss\";\n\nclass MainScreen extends React.Component {\n  //change player name up the chain\n  changeName = (e) => {\n    this.props.setplayerName(e.target.value);\n  };\n\n  //load assets\n\n  render() {\n    return (\n      <div className=\"f-center\">\n        <div className=\"highscore\">Highscores</div>\n        <Highscores></Highscores>\n        <div className=\"start-block\">\n          <input\n            value={this.props.playerName}\n            type=\"text\"\n            placeholder=\"your name\"\n            onChange={this.changeName}\n            />\n          <LoadingAssets></LoadingAssets>\n          <button onClick={() => this.props.playGame()}>Start game</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainScreen;\n","import React from \"react\";\n\nclass Card extends React.Component {\n  componentDidMount() {\n    //console.log(this.props) ;\n  }\n\n  wasClicked = () => {\n    if(!this.props.active && (!this.props.block || !this.props.demo)) {\n      this.props.clicked(this.props.src, this.props.id);\n    }\n    //this.makeClass(true);\n  };\n\n  makeClass = () => {\n    let myclass = \"card \";\n    myclass += this.props.demo ? \"show \" : \"\";\n    myclass += this.props.block ? \"show-block \" : \"\";\n    myclass += this.props.active ? \"show-active \" : \"\";\n    //myclass += active ? \"show-active \" : \"\";\n    return myclass;\n  };\n\n  render() {\n    return (\n      <div className={this.makeClass()} onClick={() => this.wasClicked()}>\n        <div className=\"card-content\">\n          <img\n            src={`images/${this.props.src}.jpg`}\n            alt=\"\"\n          />\n          <div className=\"overlay\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"../styles/popmessage.scss\";\n\nclass PopMessage extends React.Component {\n  state = {\n    time: this.props.time,\n    level: this.props.level || 1,\n    interval: null,\n  };\n  \n  componentDidMount(){\n    let interval = setInterval(() => {\n      if(this.state.time > 0){\n        this.setState({time: this.state.time - 1});\n      }\n    }, 1000);\n    this.setState({interval});\n  }\n  componentWillUnmount(){\n    clearInterval(this.state.interval);\n  }\n  render() {\n    return (\n      <div className=\"popmessage\">\n        <div className=\"level\">Level {this.state.level}</div>\n        <div className=\"time\">{this.state.time}</div>\n      </div>\n    );\n  }\n}\n\nexport default PopMessage;\n","import React from \"react\";\nimport \"../styles/game.scss\";\nimport Card from \"./Card.js\";\nimport PopMessage from \"./PopMessage\";\n\nclass GamePage extends React.Component {\n  state = {\n    level: 0,\n    points: 0,\n    time: 0,\n    errors: 0,\n    listOfCards: [],\n    perfect: 1,\n    demoMode: true,\n    demoTime: 9,\n    activeKey: [],\n    activeType: [],\n    matched: [],\n    gameEnd: false,\n  };\n\n  nextLevel = () => {\n    /*\n\n    */\n    this.setState({\n      level: this.state.level + 1,\n      points: this.calculatePoints(),\n      time: this.calculateTime(),\n      errors: 0,\n      perfect: 1,\n      listOfCards: this.makeListOfCards(),\n      demoMode: true,\n      demoTime: Math.max(4, Math.ceil(this.state.demoTime - this.state.level * 0.1)),\n      matched: [],\n    });\n  };\n\n  calculatePoints = () => {\n    return (\n      this.state.points +\n      this.state.level * this.state.time +\n      this.state.level * 100 * this.state.perfect\n    );\n  };\n\n  calculateTime = () => {\n    return Math.max(600 - parseInt(Math.ceil(this.state.level * 0.05 * 600)), 30);\n  };\n\n  makeListOfCards = () => {\n    //let maxCards = Math.min(Math.max(8, 2 * this.state.level), 28);\n    let maxCards = 8;\n    if(this.state.level >4){\n      maxCards=10;\n    }\n    if(this.state.level >8){\n      maxCards=12;\n    }\n    if(this.state.level >12){\n      maxCards=15;\n    }\n    let items = [...Array(maxCards).keys(), ...Array(maxCards).keys()];\n    this.shuffleArray(items);\n    return items;\n  };\n\n  shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  stopGame = () => {\n    clearInterval(this.interval);\n    //save results\n    if (this.props.playerName && this.state.points) {\n      this.insertHighscore({\n        name: this.props.playerName,\n        level: this.state.level,\n        points: this.calculatePoints(),\n      });\n    }\n    /*\n    this.setState({\n      level: 0,\n      points: 0,\n      time: 0,\n      errors: 0,\n      listOfCards: [],\n      demoMode: true,\n      demoTime: 9,\n      activeKey: [],\n      activeType: [],\n      matched: [],\n    });\n    */\n    //exit screen\n    this.props.stopGame();\n  };\n\n  //start countdown timer\n  startLevel = () => {\n    this.nextLevel();\n    //end demo mode\n    setTimeout(() => {\n      this.setState({\n        demoMode: false,\n      });\n    }, this.state.demoTime * 1000);\n    //\n\n  };\n  //calculate next level\n\n  //insert new score\n  insertHighscore = (score, max = 12) => {\n    let highscores = JSON.parse(localStorage.getItem(\"scoresList\")) || [];\n    let scoresList = [...highscores, score]\n      //sort DESC level\n      .sort((a, b) =>\n        parseInt(a.level) > parseInt(b.level)\n          ? -1\n          : parseInt(b.level) > parseInt(a.level)\n          ? 1\n          : 0\n      )\n      //sort DESC points\n      .sort((a, b) =>\n        parseInt(a.points) > parseInt(b.points)\n          ? -1\n          : parseInt(b.points) > parseInt(a.points)\n          ? 1\n          : 0\n      )\n      .slice(0, max);\n    localStorage.setItem(\"scoresList\", JSON.stringify(scoresList));\n  };\n\n  componentDidMount() {\n    this.startLevel();\n    this.interval = setInterval(() => {\n      if (this.state.time > 0 && !this.state.gameEnd) {\n        this.setState({ time: this.state.time - 1 });\n      } else {\n        this.stopGame();\n      }\n    }, 1000);\n    //this.insertHighscore({ name: \"zeto\", points: 4150, level: 6});\n  }\n\n  componentWillUnmount() {\n    //clearInterval(this.interval);\n  }\n\n  //catch card clicks\n  clicked = (type, key) => {\n    if(this.state.demoMode){ return false;}\n    //console.log(type,key,this.state.activeKey,this.state.activeType,this.state.matched);\n    //*** deal with clicked card logic\n\n    //nothing open\n    if (this.state.activeKey.length === 0) {\n      let newActiveType = [...this.state.activeType, type];\n      let newActiveKey = [...this.state.activeKey, key];\n      this.setState({ activeType: newActiveType, activeKey: newActiveKey });\n    }\n    //one is open\n    else {\n      //equals, close pair\n      if (this.state.activeKey.length < 2 && this.state.activeType.includes(type)) {\n        let newMatch = [...this.state.matched, type];\n        this.setState({ matched: newMatch, activeKey: [], activeType: [] });\n        //end level?\n        if (newMatch.length * 2 == this.state.listOfCards.length) {\n          this.startLevel();\n          //console.log(\"LEVEL FINISHED\");\n        }\n      }\n      //reset active if not\n      else {\n        let newActiveType = [...this.state.activeType, type];\n        let newActiveKey = [...this.state.activeKey, key];\n        let newPoints = Math.max(this.state.points - 10, 0);\n        this.setState({\n          activeType: newActiveType,\n          activeKey: newActiveKey,\n          points: newPoints,\n          perfect: 0,\n        });\n        setTimeout(() => {\n          this.setState({ activeKey: [], activeType: [] });\n        }, 500);\n      }\n    }\n    //console.log(\"EXIT\",type,key,this.state.activeKey,this.state.activeType,this.state.matched);\n  };\n\n  //create cards\n  cards = () => {\n    return this.state.listOfCards.map((card, i) => {\n      return (\n        <Card\n          key={i}\n          src={card}\n          type={card}\n          id={i}\n          clicked={this.clicked}\n          block={this.state.matched.includes(card)}\n          demo={this.state.demoMode}\n          active={this.state.activeKey.includes(i)}\n        ></Card>\n      );\n    });\n  };\n\n  popMessage = () => {\n    if (this.state.demoMode) {\n      return (\n        <PopMessage level={this.state.level} time={this.state.demoTime}></PopMessage>\n      );\n    }\n    return \"\";\n  };\n\n  //\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"header\">\n          <div className=\"scores\">\n            <div className=\"name\">{this.props.playerName}</div>\n            <div className=\"points\">\n              {this.state.points}\n              <span>points</span>\n            </div>\n            <div className=\"level\">\n              {this.state.level}\n              <span>level</span>\n            </div>\n          </div>\n          {this.popMessage()}\n          <div className=\"timeleft\">\n            <span>time left</span>\n            {this.state.time}\n            <span>s</span>\n          </div>\n          <button className=\"btn\" onClick={() => this.stopGame()}>\n            Exit\n          </button>\n        </div>\n        <div className={`cards line-${this.state.listOfCards.length / 2}`}>{this.cards()}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GamePage;\n","import React from \"react\";\nimport MainScreen from \"./MainScreen.js\";\nimport GamePage from \"./GamePage.js\";\n\nclass App extends React.Component {\n  state = {\n    playing: false,\n  \n    playerName: \"\",\n  };\n\n  setPlayerName = (name) => {\n    this.setState({ playerName: name });\n    localStorage.setItem(\"playername\", JSON.stringify(name));\n  };\n\n  toggleGame = () => {\n    this.setState({ playing: !this.state.playing });\n    //on exit reset level\n    /*\n    if (this.state.playing) {\n      this.setState({ level: 0, points: 0, time: 0,errors:0 });\n    }*/\n  };\n\n  componentDidMount() {\n    let name = JSON.parse(localStorage.getItem(\"playername\")) || \"\";\n    this.setPlayerName(name);\n  }\n\n  showMyComponent = () => {\n    if (this.state.playing) {\n      return (\n        <GamePage\n          stopGame={this.toggleGame}\n          playerName={this.state.playerName}\n        ></GamePage>\n      );\n    }\n    return (\n      <MainScreen\n        playGame={this.toggleGame}\n        playerName={this.state.playerName}\n        setplayerName={this.setPlayerName}\n      ></MainScreen>\n    );\n  };\n\n  render() {\n    return <div className=\"content\">{this.showMyComponent()}</div>;\n  }\n}\n\nexport default App;\n","import './styles/styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}